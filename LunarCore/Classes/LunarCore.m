//
//  LunarCore.m
//  LunarCore
//
//  Created by cyan on 15/4/4.
//  Copyright (c) 2015年 cyan. All rights reserved.
//

#import "LunarCore.h"

static const int minYear        = 1890;     // 最小年限
static const int maxYear        = 2100;     // 最大年限
static const int weekStart      = 0;        // 周首日（可改成 app 配置）

/**
 *  获得本地化的字符串 这里 app 可以自行实现
 *
 *  @param text key
 *
 *  @return 本地化字符串
 */
static inline NSString *i18n(NSString *key) {
    return key;
}

/**
 *  获得不为空的字符串
 *
 *  @param text text
 *
 *  @return text
 */
static inline NSString *$(NSString *text) {
    return text ?: @"";
}

// GMT 0 的时区
NSTimeZone *timeZone() {
    static NSTimeZone *_timeZone = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _timeZone = [NSTimeZone timeZoneForSecondsFromGMT:0];
    });
    return _timeZone;
}

/**
 *  以年月和长度构造一个日历
 *
 *  @param year  年
 *  @param month 月
 *  @param len   参数
 *  @param start 开始日期
 *
 *  @return 整月日历
 */
NSMutableArray *createMonthData(int year, int month, int len, int start) {
    
    NSMutableArray *monthData = [[NSMutableArray alloc] init];
    
    if (len < 1) {
        return monthData;
    }
    
    int k = start;
    
    for (int i=0; i<len; ++i) {
        NSMutableDictionary *dict = [@{ @"year": @(year), @"month": @(month), @"day": @(k) } mutableCopy];
        ++k;
        [monthData addObject:dict];
    }
    
    return monthData;
}

// 错误码表
NSDictionary *errorCode() {
    static NSDictionary *_errCode = nil;
    if (_errCode == nil) {
        _errCode = @{
                     @(100): @"输入的年份超过了可查询范围，仅支持1891至2100年",
                     @(101): @"参数输入错误，请查阅文档"
                     };
    }
    return _errCode;
}

/**
 *  格式化日期
 *
 *  @param month 月份
 *  @param day   日期
 *
 *  @return 格式化后的日期
 */
NSString *formatDay(int month, int day) {
    return [NSString stringWithFormat:@"d%02d%02d", (month + 1), day];
}

// 1890 ~ 2100 年农历新年数据
static int springFestival[][211] = {{1,21},{2,9},{1,30},{2,17},{2,6},{1,26},{2,14},{2,2},{1,22},{2,10},{1,31},{2,19},{2,8},{1,29},{2,16},{2,4},{1,25},{2,13},{2,2},{1,22},{2,10},{1,30},{2,18},{2,6},{1,26},{2,14},{2,4},{1,23},{2,11},{2,1},{2,20},{2,8},{1,28},{2,16},{2,5},{1,24},{2,13},{2,2},{1,23},{2,10},{1,30},{2,17},{2,6},{1,26},{2,14},{2,4},{1,24},{2,11},{1,31},{2,19},{2,8},{1,27},{2,15},{2,5},{1,25},{2,13},{2,2},{1,22},{2,10},{1,29},{2,17},{2,6},{1,27},{2,14},{2,3},{1,24},{2,12},{1,31},{2,18},{2,8},{1,28},{2,15},{2,5},{1,25},{2,13},{2,2},{1,21},{2,9},{1,30},{2,17},{2,6},{1,27},{2,15},{2,3},{1,23},{2,11},{1,31},{2,18},{2,7},{1,28},{2,16},{2,5},{1,25},{2,13},{2,2},{2,20},{2,9},{1,29},{2,17},{2,6},{1,27},{2,15},{2,4},{1,23},{2,10},{1,31},{2,19},{2,7},{1,28},{2,16},{2,5},{1,24},{2,12},{2,1},{1,22},{2,9},{1,29},{2,18},{2,7},{1,26},{2,14},{2,3},{1,23},{2,10},{1,31},{2,19},{2,8},{1,28},{2,16},{2,5},{1,25},{2,12},{2,1},{1,22},{2,10},{1,29},{2,17},{2,6},{1,26},{2,13},{2,3},{1,23},{2,11},{1,31},{2,19},{2,8},{1,28},{2,15},{2,4},{1,24},{2,12},{2,1},{1,22},{2,10},{1,30},{2,17},{2,6},{1,26},{2,14},{2,2},{1,23},{2,11},{2,1},{2,19},{2,8},{1,28},{2,15},{2,4},{1,24},{2,12},{2,2},{1,21},{2,9},{1,29},{2,17},{2,5},{1,26},{2,14},{2,3},{1,23},{2,11},{1,31},{2,19},{2,7},{1,27},{2,15},{2,5},{1,24},{2,12},{2,2},{1,22},{2,9},{1,29},{2,17},{2,6},{1,26},{2,14},{2,3},{1,24},{2,10},{1,30},{2,18},{2,7},{1,27},{2,15},{2,5},{1,25},{2,12},{2,1},{1,21},{2,9}};

// 农历数据
NSDictionary *lunarCalendarData() {
    static NSDictionary *_lunarCalendarData = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _lunarCalendarData = @{
                               /// 数字转中文速查表.
                               @"weekdayAlias" : @[@"日", @"一", @"二", @"三",@"四",@"五",@"六",@"七",@"八", @"九", @"十"],
                               @"heavenlyStems": @[@"甲", @"乙", @"丙", @"丁", @"戊", @"己", @"庚", @"辛", @"壬", @"癸"], // 天干
                               @"earthlyBranches": @[@"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥"], // 地支
                               @"earthlyBranches2": @[@"寅",@"卯",@"辰",@"巳",@"午",@"未",@"申",@"酉",@"戌",@"亥",@"子",@"丑"], // 地支 计算宜忌使用
                               @"zodiac": @[@"鼠", @"牛", @"虎", @"兔", @"龙", @"蛇", @"马", @"羊", @"猴", @"鸡", @"狗", @"猪"], // 对应地支十二生肖
                               @"solarTerm": @[@"立春", @"雨水", @"惊蛰", @"春分", @"清明", @"谷雨", @"立夏", @"小满", @"芒种", @"夏至", @"小暑", @"大暑", @"立秋", @"处暑", @"白露", @"秋分", @"寒露", @"霜降", @"立冬", @"小雪", @"大雪", @"冬至", @"小寒", @"大寒"], // 二十四节气
                               @"monthCn": @[@"正", @"二", @"三", @"四", @"五", @"六", @"七", @"八", @"九", @"十", @"冬", @"腊"],
                               @"dateCn": @[@"初一", @"初二", @"初三", @"初四", @"初五", @"初六", @"初七", @"初八", @"初九", @"初十", @"十一", @"十二", @"十三", @"十四", @"十五", @"十六", @"十七", @"十八", @"十九", @"二十", @"廿一", @"廿二", @"廿三", @"廿四", @"廿五", @"廿六", @"廿七", @"廿八", @"廿九", @"三十", @"卅一"],
                               /// 建除十二神
                               @"jianChu12Shen" : @[
                                       @[@"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥"],
                                       @[@"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥", @"子"],
                                       @[@"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥", @"子", @"丑"],
                                       @[@"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥", @"子", @"丑", @"寅"],
                                       @[@"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥", @"子", @"丑", @"寅", @"卯"],
                                       @[@"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥", @"子", @"丑", @"寅", @"卯", @"辰"],
                                       @[@"午", @"未", @"申", @"酉", @"戌", @"亥", @"子", @"丑", @"寅", @"卯", @"辰", @"巳"],
                                       @[@"未", @"申", @"酉", @"戌", @"亥", @"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午"],
                                       @[@"申", @"酉", @"戌", @"亥", @"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未"],
                                       @[@"酉", @"戌", @"亥", @"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申"],
                                       @[@"戌", @"亥", @"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉"],
                                       @[@"亥", @"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌"]
                                       ],
                               @"jianChu" :@[@"闭", @"建", @"除", @"满", @"平", @"定", @"执", @"破", @"危", @"成", @"收", @"开"],
                               /*
                                白虎，天刑，朱雀，天牢，玄武，勾陈--为六黑道凶日；
                                青龙，天德，玉堂，司命，明堂，金匮--为六黄道吉日
                                */
                               /// 吉
                               @"jiZhiShen" : @"青龙天德玉堂司命明堂金匮",
                               /// 凶
                               @"xiongZhiShen" : @"白虎天刑朱雀天牢玄武勾陈",
                               /// 吉凶时辰
                               @"jiXiongDic" :@{
                                       @"甲子":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"甲寅":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"甲辰":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"甲午":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"甲申":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"甲戌":@"凶,凶,吉,凶,吉,吉,凶,吉,吉,吉,凶,吉",
                                       @"乙丑":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"乙卯":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"乙巳":@"凶,吉,凶,凶,吉,凶,吉,凶,凶,凶,吉,吉",
                                       @"乙未":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"乙酉":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"乙亥":@"凶,吉,凶,凶,吉,凶,吉,凶,凶,凶,吉,吉",
                                       @"丙子":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"丙寅":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"丙辰":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"丙午":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,凶,凶,凶",
                                       @"丙申":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"丙戌":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"丁丑":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"丁卯":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"丁巳":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,吉",
                                       @"丁未":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"丁酉":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"丁亥":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,吉",
                                       @"戊子":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"戊寅":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"戊辰":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"戊午":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"戊申":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"戊戌":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"己丑":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,凶",
                                       @"己卯":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"己巳":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,吉",
                                       @"己未":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"己酉":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"己亥":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,吉",
                                       @"庚子":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"庚寅":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"庚辰":@"凶,凶,吉,凶,吉,吉,凶,凶,凶,吉,凶,吉",
                                       @"庚午":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"庚申":@"吉,吉,凶,凶,吉,吉,吉,吉,凶,凶,吉,凶",
                                       @"庚戌":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"辛丑":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"辛卯":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"辛巳":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,凶",
                                       @"辛未":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"辛酉":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"辛亥":@"凶,吉,凶,凶,吉,凶,吉,凶,凶,凶,吉,吉",
                                       @"壬子":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"壬寅":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"壬辰":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"壬午":@"吉,吉,凶,吉,凶,凶,吉,凶,吉,吉,凶,凶",
                                       @"壬申":@"吉,吉,凶,凶,吉,吉,凶,吉,凶,凶,吉,凶",
                                       @"壬戌":@"凶,凶,吉,凶,吉,吉,凶,凶,吉,吉,凶,吉",
                                       @"癸丑":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"癸卯":@"吉,凶,吉,吉,凶,凶,吉,凶,凶,吉,凶,凶",
                                       @"癸巳":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,吉",
                                       @"癸未":@"凶,凶,吉,吉,凶,吉,凶,凶,吉,凶,吉,吉",
                                       @"癸酉":@"吉,凶,吉,吉,凶,凶,吉,吉,凶,吉,凶,凶",
                                       @"癸亥":@"凶,吉,凶,凶,吉,凶,吉,吉,凶,凶,吉,吉"
                                       },
                               /// 冲煞方位
                               @"chongShaDirection" : @[@"煞南", @"煞西", @"煞北", @"煞东"],
                               
                               /// 冲煞：子午相冲，丑未相冲，寅申相冲，辰戌相冲，巳亥相冲，卯酉相冲
                               @"chongShaDiZhi" : @{
                                       @"子" : @"冲马", @"丑" : @"冲羊", @"寅" : @"冲猴",
                                       @"辰" : @"冲狗", @"巳" : @"冲猪", @"卯" : @"冲鸡",
                                       @"酉" : @"冲兔", @"亥" : @"冲蛇", @"戌" : @"冲龙",
                                       @"申" : @"冲虎", @"未" : @"冲牛", @"午" : @"冲鼠"
                                       },
                               /// 二十八星宿
                               @"xingXiu" : @[
                                       @[@"虚日鼠", @"毕月鸟", @"翼火蛇", @"箕水豹", @"奎木狼", @"鬼金羊", @"氐土貉"],
                                       @[@"昴日鸡", @"张月鹿", @"尾火虎", @"壁水貐", @"井木犴", @"亢金龙", @"女土蝠"],
                                       @[@"星日马", @"心月狐", @"室火猪", @"参水猿", @"角木蛟", @"牛金牛", @"胃土雉"],
                                       @[@"房日兔", @"危月燕", @"觜火猴", @"轸水蚓", @"斗木獬", @"娄金狗", @"柳土獐"]
                                       ],
                               /// 二十八星宿地支
                               @"xingXiuDiZhi" : @[@"申子辰", @"亥卯未", @"寅午戌", @"巳酉丑"],
                               /* 十二值神
                                1、青龙 2、明堂 3、天刑 4、朱雀 5、金匮 6、天德 7、白虎 8、玉堂 9、天牢 10、玄武 11、司命 12、勾陈
                                */
                               @"zhiShen" : @[@"青龙", @"明堂", @"天刑", @"朱雀", @"金匮", @"天德", @"白虎", @"玉堂", @"天牢", @"玄武", @"司命", @"勾陈"],
                               /// 十二值神排位表
                               @"zhishenDay": @[
                                       @[@"申" ,@"酉" ,@"戌", @"亥",@"子" ,@"丑" ,@"寅" ,@"卯" ,@"辰" ,@"巳" ,@"午" ,@"未"],
                                       @[@"戌" ,@"亥" ,@"子", @"丑",@"寅" ,@"卯" ,@"辰" ,@"巳" ,@"午" ,@"未" ,@"申" ,@"酉"],
                                       @[@"子" ,@"丑" ,@"寅", @"卯",@"辰" ,@"巳" ,@"午" ,@"未" ,@"申" ,@"酉" ,@"戌" ,@"亥"],
                                       @[@"寅" ,@"卯" ,@"辰", @"巳",@"午" ,@"未" ,@"申" ,@"酉" ,@"戌" ,@"亥" ,@"子" ,@"丑"],
                                       @[@"辰" ,@"巳" ,@"午", @"未" ,@"申" ,@"酉" ,@"戌" ,@"亥" ,@"子" ,@"丑" ,@"寅" ,@"卯"],
                                       @[@"午" ,@"未" ,@"申", @"酉" ,@"戌" ,@"亥" ,@"子" ,@"丑" ,@"寅" ,@"卯" ,@"辰" ,@"巳"]
                                       ],
                               /// 十二值神对应月
                               @"zhiShenMonth"  : @[@"子午",@"丑未",@"寅申" ,@"卯酉",@"辰戌",@"巳亥"],
                               ///  从甲子到癸亥 五行
                               @"wuXing" : @[@"海中金", @"炉中火", @"大林木", @"路旁土", @"剑锋金", @"山头火", @"涧下水", @"城头土", @"白蜡金", @"杨柳木",  @"泉中水", @"屋上土", @"霹雳火", @"松柏木", @"长流水", @"沙中金", @"山下火", @"平地木", @"壁上土", @"金箔金",  @"佛灯火", @"天河水", @"大驿土", @"钗钏金", @"桑拓木", @"大溪水", @"沙中土", @"天上火", @"石榴木", @"大海水"],
                               /// 彭祖百忌 天干
                               @"pzbjTianGan" : @[@"甲不开仓\n财物耗散", @"乙不栽植\n千株不长", @"丙不修灶\n必见灾殃", @"丁不剃头\n头必生疮", @"戊不受田\n田主不祥", @"己不破券\n二比并亡", @"庚不经络\n织机虚张", @"辛不合酱\n主人不尝",  @"壬不汲水\n更难提防", @"癸不词讼\n理弱敌强"],
                               /// 彭祖百忌 地支
                               @"pzbjDiZhi" : @[@"子不问卜\n自惹祸殃", @"丑不冠带\n主不还乡", @"寅不祭祀\n神鬼不尝", @"卯不穿井\n水泉不香",  @"辰不哭泣\n必主重丧", @"已不远行\n财物伏藏", @"午不苫盖\n屋主更张", @"未不服药\n毒气入肠", @"申不安床\n鬼祟入房", @"酉不宴客\n醉坐颠狂", @"戌不吃犬\n作怪上床", @"亥不嫁娶\n不利新郎"],
                               /// 胎神十天干对应的位置
                               @"taiShenTianGanLocation": @[@"占门", @"碓磨", @"厨灶", @"仓库", @"房床"],
                               
                               /// 胎神十二地支对应的位置
                               @"taiShenDiZhiLocation" : @[@"碓", @"厕", @"炉", @"大门", @"栖", @"床"],
                               
                               /// 胎神所在方位的干支
                               @"taiShenGanZhi"  : @[
                                       @"辛未 壬申 癸酉 甲戌 乙亥 丙子 丁丑",
                                       @"戊寅 己卯", @"庚辰 辛巳",
                                       @"壬午 癸未 甲申 乙酉 丙戌 丁亥",
                                       @"戊子 己丑 庚寅 辛卯 壬辰",
                                       @"癸巳 甲午 乙未 丙申 丁酉",
                                       @"戊戌 己亥 庚子 辛丑 壬寅 癸卯",
                                       @"甲辰 乙巳 丙午 丁未 戊申",
                                       @"己酉 庚戌 辛亥 壬子 癸丑 甲寅",
                                       @"乙卯 丙辰 丁巳 戊午 己未",
                                       @"庚申 辛酉 壬戌 癸亥 甲子 乙丑",
                                       @"丙寅 丁卯 戊辰 己巳 庚午"
                                       ],
                               /// 胎神所在方位
                               @"taiShenDirection" : @[@"外西南", @"外正南", @"外正西", @"外西北", @"外正北", @"内北", @"内南", @"内东", @"外东北", @"外正东", @"外东南", @"外正南"],
                               
                               };
    });
    return _lunarCalendarData;
}


/**
 * 二十四节气数据，节气点时间（单位是分钟）
 * 从0小寒起算
 */

NSArray *termInfo() {
    static NSArray *_termInfo = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _termInfo = @[@0,@21208,@42467,@63836,
                      @85337,@107014,@128867,@150921,
                      @173149,@195551,@218072,@240693,
                      @263343,@285989,@308563,@331033,
                      @353350,@375494,@397447,@419210,
                      @440795,@462224,@483532,@504758];
    });
    return _termInfo;
}


// 中国节日放假安排，外部设置，0无特殊安排，1工作，2放假
NSMutableDictionary *worktime() {
    static NSMutableDictionary *_worktime = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _worktime = [@{
                       @"y2013": @{@"d0101":@2,@"d0102":@2,@"d0103":@2,@"d0105":@1,@"d0106":@1,@"d0209":@2,@"d0210":@2,@"d0211":@2,@"d0212":@2,@"d0213":@2,@"d0214":@2,@"d0215":@2,@"d0216":@1,@"d0217":@1,@"d0404":@2,@"d0405":@2,@"d0406":@2,@"d0407":@1,@"d0427":@1,@"d0428":@1,@"d0429":@2,@"d0430":@2,@"d0501":@2,@"d0608":@1,@"d0609":@1,@"d0610":@2,@"d0611":@2,@"d0612":@2,@"d0919":@2,@"d0920":@2,@"d0921":@2,@"d0922":@1,@"d0929":@1,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1012":@1},
                       @"y2014": @{@"d0101":@2,@"d0126":@1,@"d0131":@2,@"d0201":@2,@"d0202":@2,@"d0203":@2,@"d0204":@2,@"d0205":@2,@"d0206":@2,@"d0208":@1,@"d0405":@2,@"d0407":@2,@"d0501":@2,@"d0502":@2,@"d0503":@2,@"d0504":@1,@"d0602":@2,@"d0908":@2,@"d0928":@1,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1011":@1},
                       @"y2015": @{@"d0101":@2,@"d0102":@2,@"d0103":@2,@"d0104":@1,@"d0215":@1,@"d0218":@2,@"d0219":@2,@"d0220":@2,@"d0221":@2,@"d0222":@2,@"d0223":@2,@"d0224":@2,@"d0228":@1,@"d0404":@2,@"d0405":@2,@"d0406":@2,@"d0501":@2,@"d0502":@2,@"d0503":@2,@"d0620":@2,@"d0621":@2,@"d0622":@2,@"d0903":@2,@"d0904":@2,@"d0905":@2,@"d0906":@1,@"d0926":@2,@"d0927":@2,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1010":@1},
                       @"y2016": @{@"d0101":@2,@"d0102":@2,@"d0103":@2,@"d0206":@1,@"d0207":@2,@"d0208":@2,@"d0209":@2,@"d0210":@2,@"d0211":@2,@"d0212":@2,@"d0213":@2,@"d0214":@1,@"d0402":@2,@"d0403":@2,@"d0404":@2,@"d0430":@2,@"d0501":@2,@"d0502":@2,@"d0609":@2,@"d0610":@2,@"d0611":@2,@"d0612":@1,@"d0915":@2,@"d0916":@2,@"d0917":@2,@"d0918":@1,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1008":@1,@"d1009":@1},
                       @"y2017": @{@"d0101":@2,@"d0102":@2,@"d0122":@1,@"d0127":@2,@"d0128":@2,@"d0129":@2,@"d0130":@2,@"d0131":@2,@"d0201":@2,@"d0202":@2,@"d0204":@1,@"d0401":@1,@"d0402":@2,@"d0403":@2,@"d0404":@2,@"d0429":@2,@"d0430":@2,@"d0501":@2,@"d0527":@1,@"d0528":@2,@"d0529":@2,@"d0530":@2,@"d0930":@1,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1008":@2,@"d1230":@2,@"d1231":@2},
                       @"y2018": @{@"d0101":@2,@"d0211":@1,@"d0215":@2,@"d0216":@2,@"d0217":@2,@"d0218":@2,@"d0219":@2,@"d0220":@2,@"d0221":@2,@"d0224":@1,@"d0405":@2,@"d0406":@2,@"d0407":@2,@"d0408":@1,@"d0428":@1,@"d0429":@2,@"d0430":@2,@"d0501":@2,@"d0616":@2,@"d0617":@2,@"d0618":@2,@"d0922":@2,@"d0923":@2,@"d0924":@2,@"d0929":@1,@"d0930":@1,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1229":@1,@"d1230":@2,@"d1231":@2},
                       @"y2019": @{@"d0101":@2,@"d0202":@1,@"d0203":@1,@"d0204":@2,@"d0205":@2,@"d0206":@2,@"d0207":@2,@"d0208":@2,@"d0209":@2,@"d0210":@2,@"d0405":@2,@"d0406":@2,@"d0407":@2,@"d0501":@2,@"d0607":@2,@"d0608":@2,@"d0609":@2,@"d0913":@2,@"d0914":@2,@"d0915":@2,@"d0929":@1,@"d1001":@2,@"d1002":@2,@"d1003":@2,@"d1004":@2,@"d1005":@2,@"d1006":@2,@"d1007":@2,@"d1012":@1}
                       } mutableCopy];
    });
    return _worktime;
}

// 公历节日
// 星号表示不重要的节日
// 破折号前面的是缩略写法
NSDictionary *solarFestival() {
    static NSDictionary *_solarFestival = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _solarFestival = @{
                           // 中国节日
                           @"d0101":@"元旦",
                           @"d0312":@"植树节",
                           @"d0501":@"劳动节",
                           @"d0504":@"青年节",
                           @"d0701":@"香港回归", // @"d0701":@"建党节 香港回归纪念日 中共诞辰 世界建筑日",
                           @"d0801":@"建军节",
                           @"d0903":@"抗日胜利", // "抗日胜利纪念日"
                           @"d0910":@"教师节",
                           @"d1001":@"国庆节",
                           @"d1111":@"光棍节",
                           @"d1220":@"澳门回归",
                           
                           // 世界节日
                           @"d0214":@"情人节",
                           @"d0308":@"妇女节",
                           @"d0315":@"消费者日",// 消费者-消费者权益日
                           @"d0401":@"愚人节",
                           @"d0422":@"地球日",// 世界地球日
                           @"d0512":@"护士节",
                           @"d0601":@"儿童节",
                           @"d1101":@"万圣节",
                           @"d1224":@"平安夜",
                           @"d1225":@"圣诞节",
                           };
    });
    return _solarFestival;
}

// 农历节日
NSDictionary *lunarFestival() {
    static NSDictionary *_lunarFestival = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _lunarFestival = @{
                           @"d0100":@"除夕",
                           @"d0101":@"春节",
                           @"d0115":@"元宵节",
                           @"d0202":@"龙抬头",
                           @"d0303":@"上巳节",
                           @"d0408":@"浴佛节",
                           @"d0505":@"端午节",
                           @"d0624":@"火把节",
                           @"d0707":@"七夕节",
                           @"d0715":@"中元节",
                           @"d0815":@"中秋节",
                           @"d0909":@"重阳节",
                           @"d1001":@"寒衣节",
                           @"d1208":@"腊八节",
                           @"d1223":@"北方小年",
                           @"d1224":@"南方小年",
                           };
    });
    return _lunarFestival;
}

// 周节日
NSDictionary *weekFestival() {
    static NSDictionary *_weekFestvial = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _weekFestvial = @{
                          @"d0521":@"母亲节",
                          @"d0631":@"父亲节",
                          @"d1145":@"感恩节",
                          };
    });
    return _weekFestvial;
}

// 节气
NSDictionary *solarTerms() {
    static NSDictionary *_solarTerms = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        _solarTerms = @{
                        @(1890): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1891): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1892): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(1893): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(1894): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1895): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1896): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(1897): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(1898): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1899): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1900): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1901): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1902): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1903): @[@"d0205",@"d0220",@"d0307",@"d0322",@"d0406",@"d0421",@"d0507",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0809",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1904): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0107",@"d0121"],
                        @(1905): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1906): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1907): @[@"d0205",@"d0220",@"d0307",@"d0322",@"d0406",@"d0421",@"d0507",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0809",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1908): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0107",@"d0121"],
                        @(1909): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1910): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1911): @[@"d0205",@"d0220",@"d0307",@"d0322",@"d0406",@"d0421",@"d0507",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0809",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1912): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0107",@"d0121"],
                        @(1913): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0120"],
                        @(1914): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1915): @[@"d0205",@"d0220",@"d0306",@"d0322",@"d0406",@"d0421",@"d0506",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1916): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1917): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0120"],
                        @(1918): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1919): @[@"d0205",@"d0220",@"d0306",@"d0322",@"d0406",@"d0421",@"d0506",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1920): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1921): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1922): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1923): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1924): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1925): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1926): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1927): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0909",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1928): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1929): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1930): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1931): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0607",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1932): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1933): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1934): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1935): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1936): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1937): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1938): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1939): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1940): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1941): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1942): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1943): @[@"d0205",@"d0219",@"d0306",@"d0321",@"d0406",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1944): @[@"d0205",@"d0220",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1945): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1946): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0120"],
                        @(1947): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1948): @[@"d0205",@"d0220",@"d0305",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1949): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1950): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0120"],
                        @(1951): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0724",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1223",@"d0106",@"d0121"],
                        @(1952): @[@"d0205",@"d0220",@"d0305",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1953): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1954): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1955): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1956): @[@"d0205",@"d0220",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1957): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1958): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1959): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1960): @[@"d0205",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1961): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1962): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1963): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1964): @[@"d0205",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1965): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1966): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1967): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1968): @[@"d0205",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1969): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1970): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1971): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0924",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1972): @[@"d0205",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1973): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1974): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1975): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0522",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0121"],
                        @(1976): @[@"d0205",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1977): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1978): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1979): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0421",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0120"],
                        @(1980): @[@"d0205",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1981): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1982): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1983): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0708",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1208",@"d1222",@"d0106",@"d0120"],
                        @(1984): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0106",@"d0121"],
                        @(1985): @[@"d0204",@"d0219",@"d0305",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1986): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1987): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0824",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1988): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(1989): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1990): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1991): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1992): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(1993): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1994): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1995): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(1996): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(1997): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1998): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(1999): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(2000): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(2001): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2002): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2003): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(2004): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(2005): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2006): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2007): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1009",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(2008): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(2009): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2010): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2011): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1123",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(2012): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0121"],
                        @(2013): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2014): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2015): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0622",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0106",@"d0120"],
                        @(2016): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0120"],
                        @(2017): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2018): @[@"d0204",@"d0219",@"d0305",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2019): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2020): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0106",@"d0120"],
                        @(2021): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2022): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2023): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1024",@"d1108",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2024): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2025): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2026): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2027): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2028): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2029): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2030): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2031): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0506",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0808",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2032): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2033): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2034): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2035): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2036): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2037): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2038): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2039): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2040): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2041): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2042): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2043): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2044): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2045): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2046): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2047): @[@"d0204",@"d0219",@"d0306",@"d0321",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0908",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2048): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1121",@"d1206",@"d1221",@"d0106",@"d0120"],
                        @(2049): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0119"],
                        @(2050): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2051): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0606",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2052): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2053): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0119"],
                        @(2054): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2055): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2056): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2057): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2058): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2059): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2060): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2061): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2062): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2063): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2064): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2065): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2066): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2067): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2068): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0504",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2069): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2070): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2071): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2072): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0504",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2073): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2074): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0520",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2075): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2076): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0504",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2077): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2078): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0823",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2079): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2080): @[@"d0204",@"d0219",@"d0305",@"d0320",@"d0404",@"d0419",@"d0504",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2081): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1121",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2082): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2083): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2084): @[@"d0204",@"d0219",@"d0304",@"d0319",@"d0404",@"d0419",@"d0504",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0906",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2085): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1121",@"d1206",@"d1221",@"d0104",@"d0119"],
                        @(2086): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0119"],
                        @(2087): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"],
                        @(2088): @[@"d0204",@"d0219",@"d0304",@"d0319",@"d0404",@"d0419",@"d0504",@"d0520",@"d0604",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0906",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2089): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1023",@"d1107",@"d1121",@"d1206",@"d1221",@"d0104",@"d0119"],
                        @(2090): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2091): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2092): @[@"d0204",@"d0219",@"d0304",@"d0319",@"d0404",@"d0419",@"d0504",@"d0520",@"d0604",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0906",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2093): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0104",@"d0119"],
                        @(2094): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2095): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2096): @[@"d0204",@"d0218",@"d0304",@"d0319",@"d0404",@"d0419",@"d0504",@"d0520",@"d0604",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0906",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0105",@"d0120"],
                        @(2097): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0620",@"d0706",@"d0722",@"d0806",@"d0822",@"d0907",@"d0922",@"d1007",@"d1022",@"d1106",@"d1121",@"d1206",@"d1221",@"d0104",@"d0119"],
                        @(2098): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0419",@"d0505",@"d0520",@"d0605",@"d0621",@"d0706",@"d0722",@"d0807",@"d0822",@"d0907",@"d0922",@"d1008",@"d1023",@"d1107",@"d1122",@"d1206",@"d1221",@"d0105",@"d0119"],
                        @(2099): @[@"d0203",@"d0218",@"d0305",@"d0320",@"d0404",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0722",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1221",@"d0105",@"d0120"],
                        @(2100): @[@"d0204",@"d0218",@"d0305",@"d0320",@"d0405",@"d0420",@"d0505",@"d0521",@"d0605",@"d0621",@"d0707",@"d0723",@"d0807",@"d0823",@"d0907",@"d0923",@"d1008",@"d1023",@"d1107",@"d1122",@"d1207",@"d1222",@"d0105",@"d0120"]
                        };
    });
    return _solarTerms;
}

/**
 *  构造 NSDate
 *
 *  @param year  年
 *  @param month 月
 *  @param day   日
 *
 *  @return NSDate
 */
NSDate *Date(int year, int month, int day) {
    NSCalendar *calendar = [NSCalendar currentCalendar];
    NSDateComponents *comp = [[NSDateComponents alloc] init];
    comp.year = year; comp.month = month + 1; comp.day = day;
    NSDate *date = [calendar dateFromComponents:comp];
    return date;
}

/**
 *  构造 NSDate
 *
 *  @param year  年
 *  @param month 月
 *  @param day   日
 *
 *  @return NSDate
 */
NSDate *NewDate(int year, int month, int day) {
    return Date(year, month - 1, day);
}

/**
 *  获得以周为单位的节日
 *
 *  @param year  年
 *  @param month 月
 *  @param day   日
 *
 *  @return 节日
 */
NSString *getWeekFestival(int year, int month, int day) {
    
    NSDate *date = NewDate(year, month, day);
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *comps = [gregorian components:NSCalendarUnitWeekday fromDate:date];
    NSInteger weekDay = comps.weekday;
    
    // 这个时候要数出cWeekDay是第几个
    int weekDayCount = 0;
    for (int curDay=1; curDay<=day; ++curDay) {
        NSDate *curDate = NewDate(year, month, curDay);
        NSDateComponents *weekComp = [gregorian components:NSCalendarUnitWeekday fromDate:curDate];
        if (weekComp.weekday == weekDay) {
            ++weekDayCount;
        }
    }
    
    NSString *key = [NSString stringWithFormat:@"d%02d%d%d", month, weekDayCount, (int)weekDay];
    NSString *festival = weekFestival()[key];
    if (festival) {
        return i18n(festival);
    }
    
    NSString * easterDay = [[LunarCore shareInstance] getEasterFestival:year _month:month _day:day];
    if ([easterDay length] > 0){
        return i18n(easterDay);
    }
    
    return nil;
}

/**
 * 1890 - 2100 年的农历数据
 * 数据格式：[0,2,9,21936]
 * [闰月所在月，0为没有闰月; *正月初一对应公历月; *正月初一对应公历日; *农历每月的天数的数组（需转换为二进制,得到每月大小，0=小月(29日),1=大月(30日)）;]
 */
static int lunarInfo[][210] = {{2,1,21,22184},{0,2,9,21936},{6,1,30,9656},{0,2,17,9584},{0,2,6,21168},{5,1,26,43344},{0,2,13,59728},{0,2,2,27296},{3,1,22,44368},{0,2,10,43856},{8,1,30,19304},{0,2,19,19168},{0,2,8,42352},{5,1,29,21096},{0,2,16,53856},{0,2,4,55632},{4,1,25,27304},{0,2,13,22176},{0,2,2,39632},{2,1,22,19176},{0,2,10,19168},{6,1,30,42200},{0,2,18,42192},{0,2,6,53840},{5,1,26,54568},{0,2,14,46400},{0,2,3,54944},{2,1,23,38608},{0,2,11,38320},{7,2,1,18872},{0,2,20,18800},{0,2,8,42160},{5,1,28,45656},{0,2,16,27216},{0,2,5,27968},{4,1,24,44456},{0,2,13,11104},{0,2,2,38256},{2,1,23,18808},{0,2,10,18800},{6,1,30,25776},{0,2,17,54432},{0,2,6,59984},{5,1,26,27976},{0,2,14,23248},{0,2,4,11104},{3,1,24,37744},{0,2,11,37600},{7,1,31,51560},{0,2,19,51536},{0,2,8,54432},{6,1,27,55888},{0,2,15,46416},{0,2,5,22176},{4,1,25,43736},{0,2,13,9680},{0,2,2,37584},{2,1,22,51544},{0,2,10,43344},{7,1,29,46248},{0,2,17,27808},{0,2,6,46416},{5,1,27,21928},{0,2,14,19872},{0,2,3,42416},{3,1,24,21176},{0,2,12,21168},{8,1,31,43344},{0,2,18,59728},{0,2,8,27296},{6,1,28,44368},{0,2,15,43856},{0,2,5,19296},{4,1,25,42352},{0,2,13,42352},{0,2,2,21088},{3,1,21,59696},{0,2,9,55632},{7,1,30,23208},{0,2,17,22176},{0,2,6,38608},{5,1,27,19176},{0,2,15,19152},{0,2,3,42192},{4,1,23,53864},{0,2,11,53840},{8,1,31,54568},{0,2,18,46400},{0,2,7,46752},{6,1,28,38608},{0,2,16,38320},{0,2,5,18864},{4,1,25,42168},{0,2,13,42160},{10,2,2,45656},{0,2,20,27216},{0,2,9,27968},{6,1,29,44448},{0,2,17,43872},{0,2,6,38256},{5,1,27,18808},{0,2,15,18800},{0,2,4,25776},{3,1,23,27216},{0,2,10,59984},{8,1,31,27432},{0,2,19,23232},{0,2,7,43872},{5,1,28,37736},{0,2,16,37600},{0,2,5,51552},{4,1,24,54440},{0,2,12,54432},{0,2,1,55888},{2,1,22,23208},{0,2,9,22176},{7,1,29,43736},{0,2,18,9680},{0,2,7,37584},{5,1,26,51544},{0,2,14,43344},{0,2,3,46240},{4,1,23,46416},{0,2,10,44368},{9,1,31,21928},{0,2,19,19360},{0,2,8,42416},{6,1,28,21176},{0,2,16,21168},{0,2,5,43312},{4,1,25,29864},{0,2,12,27296},{0,2,1,44368},{2,1,22,19880},{0,2,10,19296},{6,1,29,42352},{0,2,17,42208},{0,2,6,53856},{5,1,26,59696},{0,2,13,54576},{0,2,3,23200},{3,1,23,27472},{0,2,11,38608},{11,1,31,19176},{0,2,19,19152},{0,2,8,42192},{6,1,28,53848},{0,2,15,53840},{0,2,4,54560},{5,1,24,55968},{0,2,12,46496},{0,2,1,22224},{2,1,22,19160},{0,2,10,18864},{7,1,30,42168},{0,2,17,42160},{0,2,6,43600},{5,1,26,46376},{0,2,14,27936},{0,2,2,44448},{3,1,23,21936},{0,2,11,37744},{8,2,1,18808},{0,2,19,18800},{0,2,8,25776},{6,1,28,27216},{0,2,15,59984},{0,2,4,27424},{4,1,24,43872},{0,2,12,43744},{0,2,2,37600},{3,1,21,51568},{0,2,9,51552},{7,1,29,54440},{0,2,17,54432},{0,2,5,55888},{5,1,26,23208},{0,2,14,22176},{0,2,3,42704},{4,1,23,21224},{0,2,11,21200},{8,1,31,43352},{0,2,19,43344},{0,2,7,46240},{6,1,27,46416},{0,2,15,44368},{0,2,5,21920},{4,1,24,42448},{0,2,12,42416},{0,2,2,21168},{3,1,22,43320},{0,2,9,26928},{7,1,29,29336},{0,2,17,27296},{0,2,6,44368},{5,1,26,19880},{0,2,14,19296},{0,2,3,42352},{4,1,24,21104},{0,2,10,53856},{8,1,30,59696},{0,2,18,54560},{0,2,7,55968},{6,1,27,27472},{0,2,15,22224},{0,2,5,19168},{4,1,25,42216},{0,2,12,42192},{0,2,1,53584},{2,1,21,55592},{0,2,9,54560}};

/**
 *  判断农历年闰月数
 *
 *  @param year 农历年
 *
 *  @return 闰月数 （月份从1开始）
 */
int getLunarLeapYear(int year) {
    int *yearData = lunarInfo[year - minYear];
    return yearData[0];
};

NSArray *toString(int num) {
    NSMutableArray *arr = [[NSMutableArray alloc] init];
    while (num) {
        [arr addObject:[@(num & 1) stringValue]];
        num >>= 1;
    }
    return [[arr reverseObjectEnumerator] allObjects];
}

/**
 *  获取农历年份一年的每月的天数及一年的总天数
 *
 *  @param year 农历年
 *
 *  @return 总天数
 */
NSMutableDictionary *getLunarYearDays(int year) {
    
    int *yearData = lunarInfo[year - minYear];
    int leapMonth = yearData[0]; // 闰月
    int monthData = yearData[3];
    NSMutableArray *monthDataArr = [toString(monthData) mutableCopy];
    
    // 还原数据至16位,少于16位的在前面插入0（二进制存储时前面的0被忽略）
    for (int i=0; i<16-monthDataArr.count; ++i) {
        [monthDataArr insertObject:@0 atIndex:0];
    }
    
    int len = leapMonth ? 13 : 12; // 该年有几个月
    int yearDays = 0;
    NSMutableArray *monthDays = [[NSMutableArray alloc] init];
    
    for (int i=0; i<len; ++i) {
        if ([monthDataArr[i] intValue] == 0) {
            yearDays += 29;
            [monthDays addObject:@29];
        } else {
            yearDays += 30;
            [monthDays addObject:@30];
        }
    }
    
    return [@{
              @"yearDays": @(yearDays),
              @"monthDays": monthDays
              } mutableCopy];
};

/**
 *  通过间隔天数查找农历日期
 *
 *  @param year    农历年
 *  @param between 间隔天数
 *
 *  @return 农历日期
 */
NSMutableArray *getLunarDateByBetween(int year, int between) {
    NSMutableDictionary *lunarYearDays = getLunarYearDays(year);
    int end = between > 0 ? between : [lunarYearDays[@"yearDays"] intValue] - abs(between);
    NSMutableArray *monthDays = lunarYearDays[@"monthDays"];
    int tempDays = 0;
    int month = 0;
    for (int i=0; i<monthDays.count; ++i) {
        int monthDaysI = [monthDays[i] intValue];
        tempDays += monthDaysI;
        if (tempDays > end) {
            month = i;
            tempDays = tempDays - monthDaysI;
            break;
        }
    }
    
    return [@[@(year), @(month), @(end - tempDays + 1)] mutableCopy];
};

/**
 *  两个公历日期之间的天数
 *
 *  @param year   年
 *  @param month  月
 *  @param day    日
 *  @param year1  年2
 *  @param month1 月2
 *  @param day1   日2
 *
 *  @return 间隔天数
 */
int getDaysBetweenSolar(int year, int month, int day, int year1, int month1, int day1) {
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    calendar.timeZone = timeZone();
    NSDateComponents *comp = [[NSDateComponents alloc] init];
    comp.year = year; comp.month = month + 1; comp.day = day;
    NSDate *date = [calendar dateFromComponents:comp];
    comp.year = year1; comp.month = month1 + 1; comp.day = day1;
    NSDate *date1 = [calendar dateFromComponents:comp];
    return ([date1 timeIntervalSince1970] - [date timeIntervalSince1970]) / 86400;
};

/**
 *  根据距离正月初一的天数计算农历日期
 *
 *  @param year  公历年
 *  @param month 月
 *  @param day   日
 *
 *  @return 农历日期
 */
NSMutableArray *getLunarByBetween(int year, int month, int day) {
    int *yearData = lunarInfo[year - minYear];
    int zenMonth = yearData[1];
    int zenDay = yearData[2];
    int between = getDaysBetweenSolar(year, zenMonth - 1, zenDay, year, month, day);
    if (between == 0) { //正月初一
        return [@[@(year), @0, @1] mutableCopy];
    } else {
        int lunarYear = (between > 0) ? (year) : (year - 1);
        return getLunarDateByBetween(lunarYear, between);
    }
};

/**
 *  根据 NSDate 获得天
 *
 *  @param date date
 *
 *  @return 天
 */
int getDay(NSDate *date) {
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *components = [gregorian components:NSCalendarUnitWeekday fromDate:date];
    return (int)components.weekday - 1;
}

/**
 *  获取公历年一年的二十四节气
 *
 *  @param year 年
 *
 *  @return 日期: 节气名
 */
NSMutableDictionary *getYearTerm(int year) {
    NSMutableDictionary *res = [[NSMutableDictionary alloc] init];
    NSArray *keys = solarTerms()[@(year)];
    NSArray *values = lunarCalendarData()[@"solarTerm"];
    [keys enumerateObjectsUsingBlock:^(NSString *key, NSUInteger idx, BOOL *stop) {
        res[key] = i18n(values[idx]);
    }];
    return res;
};

/// 计算某一年的第n个节气为几号, 由于农历24节气交节时刻采用近似算法，可能存在少量误差(30分钟内)
/// 31556925974.7为地球公转周期，是毫秒
/// 1890年的正小寒点：01-05 16:02:31，1890年为基准点 (-2524147392000)
/// - Parameters:
///   - y: 公历年
///   - n: 第几个节气，从0小寒起算
/// - Returns: 某月第一个节气开始日期
NSInteger getTerm(int y, int n) {
    //var offDate = new Date( ( 31556925974.7*(y-1890) + termInfo[n]*60000  ) + Date.UTC(1890,0,5,16,2,31) )
    //return(offDate.getUTCDate())
    
    NSTimeInterval  time1890 = -2524147392000;
    NSTimeInterval a = 31556925974.7 * (y-1890);
    NSTimeInterval b = [termInfo()[n] floatValue] * 60000;
    NSTimeInterval offTime = a + b + time1890;
    NSDate* date =    [[NSDate alloc] initWithTimeIntervalSince1970: offTime/ 1000 ];
    
    NSCalendar* gregorian = NSCalendar.currentCalendar;
    NSDateComponents *components = [gregorian components:(NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay) fromDate:date];
    return components.day;
}

/// 得到日期对应的周
NSInteger getWeek(NSDate *date){
    NSCalendar* gregorian = NSCalendar.currentCalendar;
    NSDateComponents *components = [gregorian components:(NSCalendarUnitWeekday) fromDate:date];
    return components.weekday;
}

/// 得到日期对应一年的周
NSInteger getYearWeek(NSDate *date){
    NSCalendar* gregorian = NSCalendar.currentCalendar;
    NSDateComponents *components = [gregorian components:(NSCalendarUnitWeekOfYear) fromDate:date];
    return components.weekOfYear;
}

/**
 *  获得生肖
 *
 *  @param year 年
 *
 *  @return 生肖
 */
NSString *getYearZodiac(int year) {
    int num = year - 1890 + 25; // 参考干支纪年的计算，生肖对应地支
    return i18n(lunarCalendarData()[@"zodiac"][num % 12]);
};

/**
 *  计算天干地支
 *
 *  @param num 60进制中的位置(把60个天干地支，当成一个60进制的数)
 *
 *  @return 天干地支
 */
NSString *cyclical(long num) {
    NSString *tiangan = i18n(lunarCalendarData()[@"heavenlyStems"][num % 10]);
    NSString *dizhi = i18n(lunarCalendarData()[@"earthlyBranches"][num % 12]);
    return [NSString stringWithFormat:@"%@%@", tiangan, dizhi];
}

/**
 *  获取干支纪年
 *
 *  @param year   干支所在年
 *  @param offset 偏移量，默认为0，便于查询一个年跨两个干支纪年（以立春为分界线）
 *
 *  @return 干支纪年
 */
NSString *getLunarYearName(int year, int offset) {
    // 1890年1月小寒（小寒一般是1月5或6日）以前为己丑年，在60进制中排25
    return cyclical(year - 1890 + 25 + offset);
};

/**
 * 获取干支纪月
 * @param   year 公历年月，干支所在月(以节气为界）
 */
NSString* getLunarMonthName(int year, int month, int day) {
    
    /////////////       1
    //某月第一个节气开始日期
    NSInteger firstTerm = getTerm(year, month * 2);
    
    //干支所在月份（以节气为界）
    int  ganZhiMonth = day >= firstTerm ? month + 1 : month ;
    
    return cyclical((year - 1890) * 12 + ganZhiMonth + 12);
    
}

/**
 * 获取干支纪日
 * year,month,day 公历年，月，日
 */
NSString* getLunarDayName(NSTimeInterval date) {
    //当日与1890/1/1 相差天数
    //1890/1/1与 1970/1/1 相差29219日, 1890/1/1 日柱为壬午日(60进制18)
    int dayCyclical = ceil(date/86400)+29219+18;
    return cyclical(dayCyclical);
}

/** 根据生日计算星座  @param birthday 生日 eg:2016-10-25  @return 星座 */
NSString* getAstroWithBirthday(NSInteger month,NSInteger day) {
    NSString *astroString = @"魔羯水瓶双鱼白羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯";
    NSString *astroFormat = @"102123444543";
    NSString *result;
    result=[NSString stringWithFormat:@"%@座",[astroString substringWithRange:NSMakeRange(month *2-(day < [[astroFormat substringWithRange:NSMakeRange((month-1), 1)] intValue] - (-19))*2,2)]];
    
    return result;
}


///计算间隔时间
NSInteger intervalDayFromNow(NSDate* date )  {
    NSCalendar* calendar = NSCalendar.currentCalendar;
    
    // Replace the hour (time) of both dates with 00:00
    NSDate* date1 = [calendar startOfDayForDate:[NSDate date]];
    NSDate* date2 =  [calendar startOfDayForDate:date];
    
    NSDateComponents * components =  [calendar components:NSCalendarUnitDay fromDate:date2 toDate:date1 options:NSCalendarWrapComponents];
    
    return components.day;
}


///计算干支纪年的索引
NSInteger getGanZhiIndex(NSString* gznZhi){
    for (int i =0 ;i< 60 ;i++){
        NSString * _gz = cyclical(i);
        if ([_gz isEqualToString:gznZhi]){
            return i;
        }
    }
    return 0;
}

///宜忌文件路径
NSString * getYijipath(){
    NSString* mainBundlePath = [[NSBundle mainBundle] resourcePath];
//    NSString* frameworks = [mainBundlePath stringByAppendingPathComponent:@"Frameworks"];
//    NSString* frameworkPath = [frameworks stringByAppendingPathComponent:@"LunarCore.framework"];
    NSString* BundlePath = [mainBundlePath stringByAppendingPathComponent:@"LunarCore.bundle"];
    NSString* yiji = [BundlePath stringByAppendingPathComponent:@"yiji.plist"];
    return yiji;
}



/// 时辰吉凶
NSString * jiXiongTime(NSString * ganZhiDayName){
    NSString* jiXiongValue = lunarCalendarData()[@"jiXiongDic"][ganZhiDayName] ;
    return jiXiongValue;
}

/// 冲煞
NSString * getChongShaValue(NSString * dayDiZhiName){
    NSString* chongShaValue = lunarCalendarData()[@"chongShaDiZhi"][dayDiZhiName];
    NSArray * xingXiuDiZhi = lunarCalendarData()[@"xingXiuDiZhi"];
    NSArray * chongShaDirection = lunarCalendarData()[@"chongShaDirection"];
    for (int i =0;i< [xingXiuDiZhi count]; i++) {
        if ([xingXiuDiZhi[i] rangeOfString:dayDiZhiName].location != NSNotFound){
            return  [NSString stringWithFormat:@"%@ %@",chongShaValue,chongShaDirection[i]];
        }
    }
    return @"";
}

/// 值神
NSString* getZhiShenValue(NSString * dayDiZhiName, NSString * monthDiZhiName){
    
    NSArray * zhiShen = lunarCalendarData()[@"zhiShen"];
    NSArray * zhiShenMonth = lunarCalendarData()[@"zhiShenMonth"];
    NSArray * zhishenDay = lunarCalendarData()[@"zhishenDay"];
    
    for (int i =0;i< [zhiShenMonth count]; i++) {
        if ([zhiShenMonth[i] rangeOfString:monthDiZhiName].location != NSNotFound){
            for (int j =0;j< [zhishenDay[i] count]; j++) {
                if ([zhishenDay[i][j] rangeOfString:dayDiZhiName].location != NSNotFound){
                    return zhiShen[j];
                }
            }
        }
    }
    
    return @"";
}

/// 五行
NSString* getWuXingValue(NSString * dayGanZhiName){
    
    NSArray * wuXing = lunarCalendarData()[@"wuXing"];
    NSMutableDictionary * wuXingDic = [NSMutableDictionary dictionary];
    
    for (int i=0; i< wuXing.count ;i++ ) {
        wuXingDic[cyclical(i*2)] = wuXing[i];
        wuXingDic[cyclical(i*2 + 1 )] = wuXing[i];
    }
    
    return wuXingDic[dayGanZhiName];
}

/// 星宿
NSString* getXingXiualue(NSString * dayDiZhiName, NSInteger week){
    
    NSArray * xingXiuDiZhi = lunarCalendarData()[@"xingXiuDiZhi"];
    NSArray * xingXiu = lunarCalendarData()[@"xingXiu"];
    week --;
    for (int i =0;i< [xingXiuDiZhi count]; i++) {
        if ([xingXiuDiZhi[i] rangeOfString:dayDiZhiName].location != NSNotFound){
            
            if (week < 0) {
                week = 0;
            }
            NSString * xingXiuValue = xingXiu[i][week];
            return xingXiuValue;
        }
    }
    
    return @"";
}


/// 彭祖百忌
NSString* getPenZhuBaiJiValue(NSString * dayTianGanName,NSString * dayDiZhiName){
    NSArray * pzbjTianGan = lunarCalendarData()[@"pzbjTianGan"];
    NSArray * pzbjDiZhi = lunarCalendarData()[@"pzbjDiZhi"];
    
    NSArray * heavenlyStems = lunarCalendarData()[@"heavenlyStems"];
    NSArray * earthlyBranches = lunarCalendarData()[@"earthlyBranches"];
    
    NSInteger  tainGanIndex =  [heavenlyStems indexOfObject:dayTianGanName];
    NSInteger  diZhiIndex =  [earthlyBranches indexOfObject:dayDiZhiName];
    
    NSString * penZhuBaiJialue = [NSString stringWithFormat:@"%@\n%@", pzbjTianGan[tainGanIndex] , pzbjDiZhi[diZhiIndex]];
    
    return [penZhuBaiJialue stringByReplacingOccurrencesOfString:@"\n" withString:@" "];
}

/// 胎神
NSString* getTaiShenValue(NSString * dayTianGanName,NSString * dayDiZhiName){
    
    NSMutableDictionary * taiShenTianGanDic = [NSMutableDictionary dictionary];
    NSMutableDictionary * taiShenDiZhiDic = [NSMutableDictionary dictionary];
    
    NSArray * taiShenGanZhi = lunarCalendarData()[@"taiShenGanZhi"];
    NSArray * taiShenTianGanLocation = lunarCalendarData()[@"taiShenTianGanLocation"];
    NSArray * taiShenDiZhiLocation = lunarCalendarData()[@"taiShenDiZhiLocation"];
    NSArray * taiShenDirection = lunarCalendarData()[@"taiShenDirection"];
    
    NSArray * heavenlyStems = lunarCalendarData()[@"heavenlyStems"];
    NSArray * earthlyBranches = lunarCalendarData()[@"earthlyBranches"];
    
    for (int i=0;i<5;i++) {
        taiShenTianGanDic[heavenlyStems[i]] = taiShenTianGanLocation[i];
        taiShenTianGanDic[heavenlyStems[i + 5]] = taiShenTianGanLocation[i];
        taiShenDiZhiDic[earthlyBranches[i]] = taiShenDiZhiLocation[i];
        taiShenDiZhiDic[earthlyBranches[i + 6]] = taiShenDiZhiLocation[i];
    }
    
    taiShenDiZhiDic[earthlyBranches[5]] = taiShenDiZhiLocation[5];
    taiShenDiZhiDic[earthlyBranches[11]] = taiShenDiZhiLocation[5];
    
    NSString * ganZhiDay = [NSString stringWithFormat:@"%@%@",dayTianGanName,dayDiZhiName];
    
    NSString *taiShenDirectionString = @"";
    for(int i=0;i<taiShenGanZhi.count;i++) {
        if ([taiShenGanZhi[i] rangeOfString:ganZhiDay].location != NSNotFound) {
            taiShenDirectionString = taiShenDirection[i];
            break;
        }
    }
    
    NSString * taiShenValue = [NSString stringWithFormat:@"%@%@%@",taiShenTianGanDic[dayTianGanName] , taiShenDiZhiDic[dayDiZhiName] , taiShenDirectionString];
    
    
    return taiShenValue;
}

/**
 *  判断公历年是否是闰年
 *
 *  @param year 公历年
 *
 *  @return 是否是闰年
 */
BOOL isLeapYear(int year) {
    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
};

static int solarDaysOfMonth[] = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
/**
 *  获取公历月份的天数
 *
 *  @param year  公历年
 *  @param month 公历月
 *
 *  @return 该月天数
 */
int getSolarMonthDays(int year, int month) {
    if (month == 1) { // 二月 闰月处理
        return isLeapYear(year) ? 29 : 28;
    } else { // 普通月份查表
        return solarDaysOfMonth[month];
    }
};

/**
 *  统一日期输入参数（输入月份从1开始，内部月份统一从0开始）
 *
 *  @param year  年
 *  @param month 月
 *  @param day   日
 *
 *  @return 格式化后的日期
 */
NSMutableDictionary *formatDate(int year, int month, int day) {
    
    NSDate *now = [NSDate date];
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    gregorian.timeZone = timeZone();
    NSDateComponents *components = [gregorian components:(NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay) fromDate:now];
    int _year = year;
    int _month = month - 1;
    int _day = (day > 0) ? day: (int)components.day;
    
    if (year < (minYear ? minYear : minYear + 1) || year > maxYear) {
        return [@{@"error": @100, @"msg": errorCode()[@100]} mutableCopy];
    }
    
    return [@{
              @"year": @(_year),
              @"month": @(_month),
              @"day": @(_day)
              } mutableCopy];
};

/**
 *  判断是否处于农历新年
 *
 *  @param _year  阳历年
 *  @param _month 阳历月
 *  @param _day   阳历日
 *
 *  @return YES 表示处于农历新年
 */
BOOL isNewLunarYear(int _year, int _month, int _day) {
    
    int *springFestivalDate = springFestival[_year - minYear];
    int springFestivalMonth = springFestivalDate[0];
    int springFestivalDay = springFestivalDate[1];
    
    if (_month > springFestivalMonth) {
        return YES;
    } else if (_month == springFestivalMonth) {
        return (_day >= springFestivalDay);
    } else {
        return NO;
    }
}

/**
 *  某月公历
 *
 *  @param _year  公历年
 *  @param _month 公历月
 *
 *  @return 公历
 */
NSMutableDictionary *solarCalendar(int _year, int _month) {
    NSMutableDictionary *inputDate = formatDate(_year, _month, -1);
    
    if (inputDate[@"error"]) {
        return inputDate;
    }
    
    int year = [inputDate[@"year"] intValue];
    int month = [inputDate[@"month"] intValue];
    
    NSDate *firstDate = Date(year, month, 1);
    
    NSMutableDictionary *res = [@{
                                  @"firstDay": @(getDay(firstDate)), // 该月1号星期几
                                  @"monthDays": @(getSolarMonthDays(year, month)), // 该月天数
                                  @"monthData": [@[] mutableCopy]
                                  } mutableCopy];
    
    res[@"monthData"] = createMonthData(year, month + 1, [res[@"monthDays"] intValue], 1);
    
    int firstDay = [res[@"firstDay"] intValue];
    
    NSString *identifier = [[[NSLocale currentLocale] localeIdentifier] lowercaseString];
    if ([identifier hasSuffix:@"japanese"] ||
        [identifier hasSuffix:@"buddhist"]) { // 处理日本日历和佛教日历
        ++ firstDay;
    }
    
    int moveDays = (firstDay >= weekStart)? firstDay: (firstDay + 7);
    int preFillDays = moveDays - weekStart;
    
    // 前补齐
    int preYear = (month - 1 < 0) ? (year - 1) : (year);
    int preMonth = (month - 1 < 0) ? (11) : (month - 1);
    int preMonthDays = getSolarMonthDays(preYear, preMonth);
    NSMutableArray *preMonthData = createMonthData(preYear, preMonth + 1, preFillDays, preMonthDays - preFillDays + 1);
    res[@"monthData"] = [[preMonthData arrayByAddingObjectsFromArray:res[@"monthData"]] mutableCopy];
    // 后补齐
    int length = (int)[res[@"monthData"] count];
    int fillLen = 7 * 6 - length; // [matrix 7 * 6]
    if (fillLen != 0) {
        int nextYear = (month + 1 > 11) ? (year + 1) : (year);
        int nextMonth = (month + 1 > 11) ? (0) : (month + 1);
        NSMutableArray *nextMonthData = createMonthData(nextYear, nextMonth + 1, fillLen, 1);
        res[@"monthData"] = [[res[@"monthData"] arrayByAddingObjectsFromArray:nextMonthData] mutableCopy];
    }
    
    return res;
};

NSMutableDictionary *calendar(int _year, int _month) {
    
    NSMutableDictionary *inputDate = formatDate(_year, _month, -1);
    
    if (inputDate[@"error"]) {
        return inputDate;
    }
    
    int year = [inputDate[@"year"] intValue];
    int month = [inputDate[@"month"] intValue];
    
    NSMutableDictionary *calendarData = [solarCalendar(year, month + 1) mutableCopy];
    NSMutableArray *monthData = calendarData[@"monthData"];
    
    for (int i=0; i<monthData.count; ++i) {
        NSMutableDictionary *cData = monthData[i];
        NSMutableDictionary *lunarData = [[LunarCore shareInstance]  solarToLunar:[cData[@"year"] intValue]  _month:[cData[@"month"] intValue] _day: [cData[@"day"] intValue]] ;
        NSMutableArray *array = calendarData[@"monthData"];
        [array[i] addEntriesFromDictionary:lunarData];
    }
    
    return calendarData;
};

/**
 * 计算农历日期离正月初一有多少天
 * param  year,month,day 农年，月(0-12，有闰月)，日
 */
int getDaysBetweenZheng(int year, int month, int day) {
    NSMutableDictionary *lunarYearDays = getLunarYearDays(year);
    NSMutableArray *monthDays = lunarYearDays[@"monthDays"];
    int days = 0;
    for (int i=0; i<monthDays.count; ++i) {
        if (i < month) {
            days += [monthDays[i] intValue];
        } else {
            break;
        }
    };
    return (days + day - 1);
};

/**
 * 将农历转换为公历
 * @param year,month,day 农历年，月(1-13，有闰月)，日
 */
NSMutableDictionary *lunarToSolar(int _year, int _month, int _day) {
    
    NSMutableDictionary *inputDate = formatDate(_year, _month, _day);
    
    if (inputDate[@"error"]) {
        return inputDate;
    }
    
    int year = [inputDate[@"year"] intValue];
    int month = [inputDate[@"month"] intValue];
    int day = [inputDate[@"day"] intValue];
    
    int between = getDaysBetweenZheng(year, month, day); // 离正月初一的天数
    int *yearData = lunarInfo[year - minYear];
    int zenMonth = yearData[1];
    int zenDay = yearData[2];
    
    double timeInterval = [Date(year, zenMonth - 1, zenDay) timeIntervalSince1970] + between * 86400;
    NSDate *offDate = [NSDate dateWithTimeIntervalSince1970:timeInterval];
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *components = [gregorian components:(NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay) fromDate:offDate];
    return [@{
              @"year": @(components.year),
              @"month": @(components.month),
              @"day": @(components.day)
              } mutableCopy];
};


@interface LunarCore()
@property(nonatomic,strong) NSDictionary* yiji;

@end

@implementation LunarCore

+(LunarCore*)shareInstance{
    static LunarCore * lunarCoreInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        lunarCoreInstance = [[LunarCore alloc] init];
    });
    return lunarCoreInstance;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        
    }
    return self;
}

-(NSString*)yiji{
    if (_yiji == nil){
        NSString * yijiPath = getYijipath();
        NSDictionary * yiji =  [NSDictionary dictionaryWithContentsOfFile:yijiPath];
        _yiji = yiji;
    }
    return _yiji;
}



///计算宜忌
-(NSArray*) yijiFrom:(NSString *)ganZhiMonthName ganZhiDayName:(NSString *)  ganZhiDayName  {
    NSString * lunarMonthDiZhi = [ganZhiMonthName substringFromIndex: [ganZhiMonthName length] - 1];
    NSString * lunarDayDiZhi = [ganZhiDayName substringFromIndex: [ganZhiDayName length] - 1];
    NSInteger jiXiongIndex =   [lunarCalendarData()[@"earthlyBranches2"] indexOfObject:lunarMonthDiZhi] ;
    NSArray * jianChu12Shen = lunarCalendarData()[@"jianChu12Shen"];
    NSInteger jx = [jianChu12Shen[jiXiongIndex] indexOfObject:lunarDayDiZhi];
    NSInteger gz =  getGanZhiIndex(ganZhiDayName);
    NSString * key = [NSString stringWithFormat:@"jx%ld_gz%ld",(long)jx,gz];
    NSDictionary * yjDict = self.yiji[@"yj"];
    NSString * yj = yjDict[key];
    return [yj componentsSeparatedByString:@","];
}

/// 计算三伏天
/// 取余：rem(x,y)=x-y.*fix(x./y)
/// 取模：mod(x,y)=x-y.*floor(x./y)
/// 其中，fix()函数是向0取整，floor()函数是向负无穷取整
/// - Parameter y: 公历年
-(NSString*) getThreeDogDays:(NSInteger )_year   _month:(NSInteger)_month   _day:(NSInteger) _day {
    
 
    NSInteger start = _year % 2 == 0 ?1 :6;
    NSInteger gengDay = (start - (_year / 4)) % 10 + 10;
        
    NSInteger day = gengDay + (_year == 2084 ?0 :10);
//    tmpDic[String(format: "07%02d", day)] = "初伏";
    if (_month == 7 && _day == day) {
        return @"初伏";
    }
    day = gengDay + 20;
//    tmpDic[String(format: "07%02d", day)] = "中伏";
    if (_month == 7 && _day == day) {
        return @"中伏";
    }
    day = gengDay + (gengDay > 7 ? -1 : (_year == 2096 ? -1 : 9));
//    tmpDic[String(format: "08%02d", day)] = "末伏";
    if (_month == 8 && _day == day) {
        return @"末伏";
    }
    
    return @"";
    
}

/// 计算复活节
-(NSString*)getEasterFestival:(NSInteger )_year   _month:(NSInteger)_month   _day:(NSInteger) _day {
    NSInteger n = _year - 1900 ;
    if (n < 0 ){
        return @"";
    }
    
    NSInteger a = n % 19;
    NSInteger q = n / 4;
    NSInteger b = (7 * a + 1) / 19;
    NSInteger m = (11 * a + 4 - b) % 29;
    NSInteger w = (n + q + 31 - m) % 7;
    NSInteger result = 25 - m - w;
    
    if (result == 0 && _month == 3 && _day == 31) {
//        return (3, 31);
        return @"复活节";
    }
    else if (result > 0 && _month == 4 && _day == result) {
//        return (4, result);
        return @"复活节";
    }
    else if (_month == 3 && _day == (result + 31)){
//        return (3, result + 31);
        return @"复活节";
    }
    
    return @"";
    
}



///计算凶神
-(NSArray*) jiXiongShenFrom:(NSString * )ganZhiMonthName   ganZhiDayName:(NSString *)ganZhiDayName  {
    NSString * lunarMonthDiZhi = [ganZhiMonthName substringFromIndex: [ganZhiMonthName length] - 1];
    //    NSString * lunarDayDiZhi = [ganZhiDayName substringFromIndex: [ganZhiDayName length] - 1];
    NSInteger jiXiongIndex =   [lunarCalendarData()[@"earthlyBranches2"] indexOfObject:lunarMonthDiZhi] ;
    NSInteger gz =  getGanZhiIndex(ganZhiDayName);
    NSString * key = [NSString stringWithFormat:@"jx%ld_gz%ld",(long)jiXiongIndex,gz];
    NSDictionary * jxDict = self.yiji[@"jx"];
    NSString * jx = jxDict[key];
    return [jx componentsSeparatedByString:@","];
}


/**
 *  公历转换成农历
 *
 *  @param _year  公历年
 *  @param _month 公历月
 *  @param _day   公历日
 *
 *  @return 农历年月日
 */
-(NSMutableDictionary*) solarToLunar:(NSInteger )_year   _month:(NSInteger)_month   _day:(NSInteger) _day {
    
    NSMutableDictionary *inputDate = formatDate(_year, _month, _day);
    
    if (inputDate[@"error"]) {
        return inputDate;
    }
    
    int year = [inputDate[@"year"] intValue];
    int month = [inputDate[@"month"] intValue];
    int day = [inputDate[@"day"] intValue];

    // 二十四节气
    NSMutableDictionary * termList = getYearTerm(year);
    
    NSString * threeDogsDay = [self getThreeDogDays:_year _month:_month _day:_day];
    
    
    // 干支所在年份
    int GanZhiYear = isNewLunarYear(_year, _month, _day) ? (year + 1) : (year);
    
    NSMutableArray *lunarDate = getLunarByBetween(year, month, day);
    int lunarDate0 = [lunarDate[0] intValue];
    int lunarDate1 = [lunarDate[1] intValue];
    int lunarDate2 = [lunarDate[2] intValue];
    
    /// 黄帝纪元，1901年的黄帝纪元是4598年
    int emperorYear = lunarDate0 - 1901 + 4598 ;
    
    int lunarLeapMonth = getLunarLeapYear(lunarDate0);
    NSString *lunarMonthName;
    
    if (lunarLeapMonth > 0 && lunarLeapMonth == lunarDate1) {
        NSString *mStr = i18n(lunarCalendarData()[@"monthCn"][lunarDate1 - 1]);
        lunarMonthName = [NSString stringWithFormat:@"闰%@月", mStr];
    } else if(lunarLeapMonth > 0 && lunarDate1 > lunarLeapMonth) {
        NSString *mStr = i18n(lunarCalendarData()[@"monthCn"][lunarDate1 - 1]);
        lunarMonthName = [NSString stringWithFormat:@"%@月", mStr];
    } else {
        NSString *mStr = i18n(lunarCalendarData()[@"monthCn"][lunarDate1]);
        lunarMonthName = [NSString stringWithFormat:@"%@月", mStr];
    }
    
    // 农历节日判断
    NSString *lunarFtv;
    NSMutableArray *lunarMonthDays = getLunarYearDays(lunarDate0)[@"monthDays"];
    // 除夕
    if ((lunarDate1 == lunarMonthDays.count - 1) &&
        (lunarDate2 == [lunarMonthDays[lunarMonthDays.count - 1] intValue])) {
        lunarFtv = lunarFestival()[@"d0100"];
    } else if (lunarLeapMonth > 0 && lunarDate1 >= lunarLeapMonth) {
        NSString *date = formatDay(lunarDate1 - 1,lunarDate2);
        lunarFtv = lunarFestival()[date];
    } else {
        NSString *date = formatDay(lunarDate1,lunarDate2);
        lunarFtv = lunarFestival()[date];
    }
    
    // 放假安排：0无特殊安排，1工作，2放假
    NSString *yearKey = [NSString stringWithFormat:@"y%d", year];
    NSString *dayKey = formatDay(month, day);
    NSNumber *workTime = @0;
    NSNumber *hasData = worktime()[yearKey][dayKey];
    if (hasData) {
        workTime = hasData;
    }
    
    NSDate * date  = Date(year, month, day);
    NSInteger weekday = getWeek(date);
    NSInteger  weekOfYear = getYearWeek(date);
    
    NSArray * weekdayAlias = lunarCalendarData()[@"weekdayAlias"];
    NSString * weekSymbol = [NSString stringWithFormat:@"星期%@",weekdayAlias[weekday - 1]];
    NSString * shortSolarSymbol = [NSString stringWithFormat:@"%ld月%d日",(long)_month,_day];
    NSString * sorlarDay = [NSString stringWithFormat:@"%ld",(long)_day];
    
    
    NSString * ganZhiMonthName = $(getLunarMonthName(year, month,day));
    NSString * ganZhiDayName = $(getLunarDayName(date.timeIntervalSince1970));
    ///宜忌
    NSArray * yiji = [self yijiFrom:ganZhiMonthName ganZhiDayName:ganZhiDayName] ;
    
    NSMutableDictionary *res = [@{
//                                  @"lunarDay": lunarDate[2],
                                  @"lunarMonthName": $(lunarMonthName),
                                  @"lunarDayName": $(lunarCalendarData()[@"dateCn"][lunarDate2 - 1]),
                                  @"solarFestival": i18n($(solarFestival()[formatDay(month,day)])),
                                  @"lunarFestival": $(i18n(lunarFtv)),
                                  @"weekFestival": $(getWeekFestival(year, month + 1, day)),
                                  @"worktime": workTime,
                                  @"GanZhiYear": $(getLunarYearName(GanZhiYear, 0)),
                                  @"GanZhiMonth": ganZhiMonthName,
                                  @"GanZhiDay": ganZhiDayName,
                                  @"zodiac": $(getYearZodiac(GanZhiYear)),
                                  @"term": $(termList[formatDay(month, day)]),
                                  @"astro": $(getAstroWithBirthday( month + 1, day)),
                                  @"weekOfYear" : @(weekOfYear),
                                  @"intervalDayFromNow":@(intervalDayFromNow(date)),
                                  @"emperorYear": @(emperorYear),
                                  @"yi":$(yiji.firstObject),
                                  @"ji":$(yiji.lastObject),
                                  @"weekSymbol":$(weekSymbol),
                                  @"shortSolarSymbol":$(shortSolarSymbol),
                                  @"sorlarDay":$(sorlarDay),
                                  @"lunarYear":@(lunarDate0),
                                  @"lunarMonth":@(lunarDate1 + 1),
                                  @"lunarDay":@(lunarDate2),
                                  @"threeDogsDay":$(threeDogsDay)
                                  } mutableCopy];
  
    return res;
};


/**
 *  公历转换成黄历
 *
 *  @param _year  公历年
 *  @param _month 公历月
 *  @param _day   公历日
 *
 *  @return 农历年月日
 */
-(NSMutableDictionary*) solarToAlmanac:(NSInteger )_year   _month:(NSInteger)_month   _day:(NSInteger) _day {
    
    NSMutableDictionary *lunarDict = [self solarToLunar:_year _month:_month _day:_day];
    
    NSMutableDictionary *inputDate = formatDate(_year, _month, _day);
    
    if (inputDate[@"error"]) {
        return inputDate;
    }
    
    int year = [inputDate[@"year"] intValue];
    int month = [inputDate[@"month"] intValue];
    int day = [inputDate[@"day"] intValue];
    
    NSDate * date  = Date(year, month, day);
    NSInteger weekday = getWeek(date);
    
    
    NSString * ganZhiMonthName = $(getLunarMonthName(year, month,day));
    NSString * ganZhiDayName = $(getLunarDayName(date.timeIntervalSince1970));
    
    ///计算凶神
    NSArray* jiXiongShen = [self jiXiongShenFrom:ganZhiMonthName ganZhiDayName:ganZhiDayName];
    
    NSString * lunarMonthDiZhi = [ganZhiMonthName substringFromIndex: [ganZhiMonthName length] - 1];
    NSString * lunarDayTainGan = [ganZhiDayName substringToIndex:1];
    NSString * lunarDayDiZhi = [ganZhiDayName substringFromIndex: [ganZhiDayName length] - 1];
    
    /// 时辰吉凶
    NSString *   jiXiongValue = jiXiongTime(ganZhiDayName);
    
    /// 冲煞
    NSString * chongShaValue = getChongShaValue(lunarDayDiZhi);
    
    /// 值神
    NSString * zhiShenValue  = getZhiShenValue(lunarDayDiZhi,lunarMonthDiZhi);
    
    /// 五行
    NSString* wuXingValue = getWuXingValue(ganZhiDayName);
    
    /// 星宿
    NSString* xingXiualue = getXingXiualue(lunarDayDiZhi, weekday);
    
    ///彭祖百忌
    NSString * penZhuBaiJiValue = getPenZhuBaiJiValue(lunarDayTainGan, lunarDayDiZhi);
    
    /// 胎神
    NSString* taiShenValue = getTaiShenValue(lunarDayTainGan, lunarDayDiZhi);
    
    NSMutableDictionary *res = [@{
                                  @"jiXiong":$(jiXiongValue),
                                  @"chongSha":$(chongShaValue),
                                  @"zhiShen":$(zhiShenValue),
                                  @"wuXing":$(wuXingValue),
                                  @"xingXiu":$(xingXiualue),
                                  @"penZhuBaiJi":$(penZhuBaiJiValue),
                                  @"jiShen":$(jiXiongShen.firstObject),
                                  @"xiongShen":$(jiXiongShen.lastObject),
                                  @"taiShen":$(taiShenValue)
                                  } mutableCopy];
    [res addEntriesFromDictionary:lunarDict];
    
    return res;
}


@end
